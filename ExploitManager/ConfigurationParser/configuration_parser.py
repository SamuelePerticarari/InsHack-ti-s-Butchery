import json

class ConfigurationParser(object):
    """docstring for ConfigurationParser."""

    def __init__(self, filename):
        super(ConfigurationParser, self).__init__()
        content = ""
        try:
            f = open(filename, 'rb')
            content = f.read()
            f.close()
        except Exception as e:
            print("Errore nell'I/O del file.")
            print("Errore: {}".format(e))
            exit(1)

        try:
            self.configs = json.loads(content)
            self.event = self._get_config('event')
            self.team_token = self._get_config('TEAM-TOKEN')
            self.team_ip = self._get_config('TEAM-IP')

            self.teams = self._get_config('teams', array=True)
            for i in range(len(self.teams)):
                self.teams[i]['name'] = self.teams[i]['name'].strip()
                self.teams[i]['ip'] = self.teams[i]['ip'].strip()

            self.challenges = self._get_config('challenges', array=True)
            for i in range(len(self.challenges)):
                self.challenges[i]['name'] = self.challenges[i]['name'].strip()
                self.challenges[i]['category'] = self.challenges[i]['category'].strip()
                self.challenges[i]['port'] = self.challenges[i]['port']

            self.proto = self._get_config('MASTER-SERVER-proto')
            self.master_ip = self._get_config('MASTER-SERVER-ip')
            self.master_port = self.configs.get('MASTER-SERVER-port')
            self.master_url = self._get_config('MASTER-SERVER-url')
        except KeyError as e:
            print( "Chiave non valida: {}".format(e) )
            print( "Controlla il file di configurazioni." )
            exit(3)
        except Exception as e:
            print("File JSON non valido... Controllare la sintassi.")
            print("Errore: {}".format(e))
            exit(4)



    def _get_config(self, key, numeric=False, array=False):
        s = self.configs[key]
        if not numeric and not array:
            s = s.strip()
        return s

    def get_configs(self):
        return {
        	"event": self.event,

        	"token": self.team_token,
        	"team_ip": self.team_ip,

            "teams": self.teams,
            "challenges": self.challenges,

        	"master_url": "{}://{}{}{}".format(self.proto, self.master_ip, '' if self.master_port is None else ( ':' + str(self.master_port) ), self.master_url),
        }
