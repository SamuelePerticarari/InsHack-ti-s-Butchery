from ..database import Database
import sqlite3
from os import path as path_module
from datetime import datetime

class Sqlite_DB_Driver(Database):
    """docstring for MySqlDriver."""

    def __init__(self, path, setup_path_schema):
        super(Sqlite_DB_Driver, self).__init__()
        self.db = None
        self.path = path
        self.setup_path_schema = setup_path_schema
        if not path_module.exists(self.setup_path_schema):
            print("Il file di setup non esiste...")
            exit(7)


    def connect_to_db( self ):
        if not path_module.exists(self.path):
            self.setup_db()
            # La connessione Ã¨ effettuata all'interno del metodo
            return

        try:
            db = sqlite3.connect(
                self.path,
                detect_types=sqlite3.PARSE_DECLTYPES
            )
            self.db = db
            self.db.row_factory = sqlite3.Row

        except Exception as e:
            print("Errore: {}".format(e))
            exit(6)
        print("[INFO] Connessione al DB effettuata.")

    def get_db( self ):
        return self.db

    def setup_db(self):
        # Creo il file e faccio il setup
        f = open(self.path, 'wb')
        f.close()

        # Provo a connettermi
        self.connect_to_db()
        try:
            # Faccio il setup
            with open(self.setup_path_schema, 'rb') as f:
                self.db.executescript(f.read().decode('utf8'))
        except Exception as e:
            print("Errore: {}".format(e))
            exit(6)

    def close_db( self ):
        self.db.close()

    def count_flags( self ):
        res_count = self.db.execute( 'SELECT COUNT(*) as n_flags FROM flags' ).fetchone()
        # print(res_count['n_flags'])
        return res_count['n_flags']

    def get_flag_by_flag(self, flag):
        return self.db.execute( 'SELECT * FROM flags WHERE flag = ?', (flag,) ).fetchone()

    def get_flag_by_id(self, flag_id):
        return self.db.execute( 'SELECT * FROM flags WHERE id = ?', (flag_id,) ).fetchone()

    def insert_new_flag( self, flag, exploit_id, team_id ):
        """
            flag = "ASCBBASBSBJKASCASASCNLOIEWQLHCW="
            exploit_id = 123456
            team_id = 654321
        """
        f = get_flag_by_flag(flag)
        if( not f ):
            created_at = datetime.now()
            self.db.execute(
                'INSERT INTO flags ( id_team_rivale, id_exploit, flag, created_at ) VALUES ( ?, ?, ?, ? )',
                ( team_id, exploit_id, flag, created_at )
            )
            self.db.commit()
            return self.db.insert_id()
        else:
            return f['id']

    def insert_new_exploit( self, exploit_data, user_id, challenge_id ):
        """
            exploit_data = {
                "version": "1.0-beta",
                "command": "python exploit.py",
                "paths": [
                    "/uploads/yuascaschuoadouy/exploit.py",
                    "/uploads/yuascaschuoadouy/list.txt"
                ]
            }
            user_id = 1234567
            challenge_id = 7654321
        """
        self.db.execute(
            'INSERT INTO exploits (version, command, path, user_id, challenge_id) VALUES (?, ?, ?, ?, ?)',
            (exploit_data['version'], exploit_data['command'], '-_-*+*-_-'.join(exploit_data['paths']), user_id, challenge_id)
        )
        self.db.commit()
        return self.db.insert_id()

    def insert_new_patch( self, patch_data, user_id, challenge_id ):
        """
            patch_data = {
                "name": "xxxxxxxxxxxxx",
                "version": "1.0-beta",
                "description": "wwwwwww yyyyyyyyyyyyyy zzzzzzzzzzzzzzzzzzz",
                "paths": [
                    "/uploads/yuascaschuoadouy/exploit.py",
                    "/uploads/yuascaschuoadouy/list.txt"
                ]
            }
            user_id = 1234567
            challenge_id = 7654321
        """
        self.db.execute(
            'INSERT INTO patches (name, version, description, path, user_id, challenge_id) VALUES (?, ?, ?, ?, ?, ?)',
            ( patch_data['name'], patch_data['version'], patch_data['description'],
                '-_-*+*-_-'.join(patch_data['paths']), user_id, challenge_id )
        )
        self.db.commit()
        return self.db.insert_id()

    def insert_new_team( self, team_data ):
        """
            team_data = {
                "name": "xxxxxxxxxxxxx",
                "ip": "xxx.xxx.xxx.xxx"
            }
        """
        self.db.execute(
            'INSERT INTO teams (name, ip) VALUES (?, ?)', ( team_data['name'], team_data['ip'] )
        )
        self.db.commit()
        return self.db.insert_id()

    def insert_new_challenge( self, challenge_data ):
        """
            challenge_data = {
                "name": "xxxxxxxxxxxxx",
                "port": 8080
            }
        """
        self.db.execute(
            'INSERT INTO challenges (name, port) VALUES (?, ?)', (challenge_data['name'], challenge_data['port'])
        )
        self.db.commit()
        return self.db.insert_id()

    def list_flags_not_submitted( self ):
        res_flags = self.db.execute( 'SELECT id, flag FROM flags WHERE submitted = 0' ).fetchall()
        # print(res_flags)
        return res_flags

    def list_all_flags( self ):
        res_flags = self.db.execute( 'SELECT id, flag FROM flags' ).fetchall()
        # print(res_flags)
        return res_flags

    def set_flag_status( self, id, status, submitted=1 ):
        self.db.execute(
            'UPDATE flags SET submitted = ?, status = ? WHERE id = ?',
            (submitted,status,id,)
        )
        self.db.commit()
